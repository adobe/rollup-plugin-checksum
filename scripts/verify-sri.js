/**
 * Verification script for SRI hash generation
 * 
 * This script compares the SRI hash generated by the plugin with
 * the one generated by OpenSSL and Node.js crypto to ensure correctness.
 * 
 * It is used both for local testing and in CI/CD pipelines to verify
 * that the SRI hash implementation remains correct.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const crypto = require('crypto');
const glob = require('glob');

/**
 * Find the test files needed for verification
 * @returns {Object} Object containing the paths to the test file and SRI file
 */
const findFiles = () => {
  const testDistDir = path.resolve(__dirname, '../test/dist');

  // Find JavaScript files excluding checksum files
  let jsFiles = glob.sync('**/*.js', { cwd: testDistDir })
    .map(file => path.join(testDistDir, file))
    .filter(file => !path.basename(file).includes('checksum'));

  console.log(`Found JS files: ${jsFiles.map(f => path.basename(f)).join(', ')}`);

  // For SRI testing, we expect exactly one JavaScript file - but if there are more,
  // use the one matching our test config (index.js)
  const testFile = jsFiles.find(file => path.basename(file) === 'index.js') || jsFiles[0];

  if (!testFile) {
    throw new Error('No JavaScript test files found in test/dist/');
  }

  // Find the SRI file
  const sriFile = path.join(testDistDir, 'checksum.sri');

  if (!fs.existsSync(sriFile)) {
    throw new Error('SRI checksum file not found at: ' + sriFile);
  }

  return { testFile, sriFile };
};

/**
 * Main function to verify SRI hashes
 */
const main = () => {
  // Find the required files
  const { testFile, sriFile } = findFiles();
  console.log(`Using test file: ${path.basename(testFile)}`);
  console.log(`Using SRI file: ${path.basename(sriFile)}`);

  // Read the SRI hash generated by our plugin
  let pluginHash;
  try {
    // With the new implementation, the SRI file contains just a single hash
    pluginHash = fs.readFileSync(sriFile, 'utf8').trim();
    console.log('Plugin-generated SRI hash:', pluginHash);
  } catch (error) {
    console.error('Error reading plugin SRI hash:', error.message);
    process.exit(1);
  }

  // Extract the algorithm from the plugin hash
  const algorithm = pluginHash.split('-')[0];
  console.log('Using algorithm:', algorithm);

  // Generate the hash using OpenSSL (equivalent to the command line example)
  let opensslHash;
  try {
    // Execute the OpenSSL command
    const opensslBaseHash = execSync(
      `cat "${testFile}" | openssl dgst -${algorithm} -binary | openssl base64 -A`,
      { encoding: 'utf8' }
    ).trim();

    // Format it as an SRI hash (with algorithm prefix)
    opensslHash = `${algorithm}-${opensslBaseHash}`;
    console.log('OpenSSL-generated SRI hash:', opensslHash);
  } catch (error) {
    console.error('Error generating OpenSSL hash:', error.message);
    process.exit(1);
  }

  // Alternative method using Node.js crypto
  let nodeHash;
  try {
    const fileContent = fs.readFileSync(testFile, 'utf8');
    const hash = crypto.createHash(algorithm);
    hash.update(fileContent);
    const base64Hash = hash.digest('base64');
    nodeHash = `${algorithm}-${base64Hash}`;
    console.log('Node.js crypto-generated SRI hash:', nodeHash);
  } catch (error) {
    console.error('Error generating Node.js hash:', error.message);
    process.exit(1);
  }

  // Compare the hashes
  if (pluginHash === opensslHash) {
    console.log('\n✅ Success: Plugin hash matches OpenSSL hash');
  } else {
    console.error('\n❌ Error: Plugin hash does not match OpenSSL hash');
    process.exit(1);
  }

  if (pluginHash === nodeHash) {
    console.log('✅ Success: Plugin hash matches Node.js crypto hash');
  } else {
    console.error('❌ Error: Plugin hash does not match Node.js crypto hash');
    process.exit(1);
  }

  console.log('\n✅ All verifications passed! SRI hash implementation is correct.');
};

// Only run if called directly
if (require.main === module) {
  main();
} 